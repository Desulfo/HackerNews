{"version":3,"sources":["molecules/News.tsx","organisms/NewsContainer.tsx","App.tsx","index.tsx"],"names":["News","news","newsData","Date","time","authorsURL","by","useState","karma","setKarma","useEffect","fetch","then","response","json","data","href","className","toDateString","title","score","topStoriesAPI","newsAPI","id","fetchData","endpoint","a","result","getRandomIds","idArray","maxNumber","max","randomIds","randomIndexNumbers","i","randomNumber","Math","floor","random","includes","push","forEach","number","NewsContainer","stories","setStories","isLoading","setLoading","storiesId","idLength","length","Promise","all","map","ID","getRandomStories","sort","fistStory","secondStory","story","key","App","ReactDOM","render","document","getElementById"],"mappings":"4OAkCeA,MAhCf,YAA8B,IAAdC,EAAa,EAAbA,KACRC,EAAW,IAAIC,KAAKF,EAAKG,MACzBC,EAAU,qDAAiDJ,EAAKK,GAAtD,SAFW,EAGDC,mBAAS,MAHR,mBAGpBC,EAHoB,KAGbC,EAHa,KAa3B,OARAC,qBAAU,WACRC,MAAMN,GACHO,MAAK,SAACC,GAAD,OAAcA,EAASC,UAC5BF,MAAK,SAACG,GACLN,EAASM,EAAKP,YAEjB,IAGD,uBAAGQ,KAAK,KACN,6BAASC,UAAU,QACjB,4BAAQA,UAAU,gBAChB,iCACE,4BAAKhB,EAAKK,IAAS,IACnB,2BACE,yCADF,IACyBE,GAAS,YAEzB,IACX,8BAAON,EAASgB,iBAElB,4BAAKjB,EAAKkB,OACV,sCAAQlB,EAAKmB,MAAb,eCxBFC,EAAa,qEACbC,EAAU,SAACC,GAAD,2DACgCA,EADhC,UAKVC,EAAS,uCAAG,WAAOC,GAAP,eAAAC,EAAA,sEACKf,MAAMc,GAAUb,MAAK,SAACC,GAAD,OAAcA,EAASC,UADjD,cACVa,EADU,yBAETA,GAFS,2CAAH,sDAITC,EAAe,SAACC,EAAwBC,GAG5C,IAFA,IAPuBC,EAOjBC,EAA2B,GAC3BC,EAAoC,GACjCC,EAAI,EAAGA,EAAI,IAAM,CACxB,IAAMC,GAVeJ,EAUwBD,EAT/CM,KAAKC,MAAMD,KAAKE,SAAWF,KAAKC,MAAMN,KAU/BE,EAAmBM,SAASJ,KAC/BF,EAAmBO,KAAKL,GACxBD,KAMJ,OAHAD,EAAmBQ,SAAQ,SAACC,GAC1BV,EAAUQ,KAAKX,EAAQa,OAElBV,GAyCMW,MArCf,WAAyB,MAEOpC,mBAAS,CAAC,KAFjB,mBAEhBqC,EAFgB,KAEPC,EAFO,OAGStC,oBAAS,GAHlB,mBAGhBuC,EAHgB,KAGLC,EAHK,KAqBvB,OAfArC,qBAAU,WAAM,4CACd,kCAAAgB,EAAA,6DACEqB,GAAW,GADb,SAEyCvB,EAAUH,GAFnD,cAEQ2B,EAFR,OAGQC,EAAmBD,EAAUE,OAC7BlB,EAA2BJ,EAAaoB,EAAWC,GAJ3D,SAKwCE,QAAQC,IAC5CpB,EAAUqB,KAAI,SAACC,GAAD,OAAQ9B,EAAUF,EAAQgC,QAN5C,OAKQzC,EALR,OAQEgC,EAAWhC,GACXkC,GAAW,GATb,6CADc,uBAAC,WAAD,wBAYdQ,KACC,IAGD,0BAAMtC,UAAU,WACb6B,EACC,yCAEAF,EACGY,MACC,SAACC,EAAgBC,GAAjB,OACEA,EAAYtC,MAAQqC,EAAUrC,SAEjCiC,KAAI,SAACM,GAAD,OAAgB,kBAAC,EAAD,CAAM1D,KAAM0D,EAAOC,IAAKD,EAAMpC,UChD9CsC,MATf,WACE,OACE,yBAAK5C,UAAU,OACb,iDACA,kBAAC,EAAD,QCJN6C,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,U","file":"static/js/main.936c7070.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\r\n\r\nfunction News({ news }: any) {\r\n  const newsData = new Date(news.time);\r\n  const authorsURL = `https://hacker-news.firebaseio.com/v0/user/${news.by}.json`;\r\n  const [karma, setKarma] = useState(null);\r\n\r\n  useEffect(() => {\r\n    fetch(authorsURL)\r\n      .then((response) => response.json())\r\n      .then((data) => {\r\n        setKarma(data.karma);\r\n      });\r\n  }, []);\r\n\r\n  return (\r\n    <a href=\"#\">\r\n      <article className=\"News\">\r\n        <header className=\"News__header\">\r\n          <section>\r\n            <h3>{news.by}</h3>{' '}\r\n            <p>\r\n              <small>karma:</small> {karma || 'loading'}\r\n            </p>\r\n          </section>{' '}\r\n          <data>{newsData.toDateString()}</data>\r\n        </header>\r\n        <h2>{news.title}</h2>\r\n        <h3>{`${news.score} âœ©`}</h3>\r\n      </article>\r\n    </a>\r\n  );\r\n}\r\n\r\nexport default News;\r\n","import React, { useState, useEffect } from 'react';\r\n\r\nimport News from '../molecules/News';\r\n\r\nconst topStoriesAPI = `https://hacker-news.firebaseio.com/v0/topstories.json?print=pretty`;\r\nconst newsAPI = (id: number) =>\r\n  `https://hacker-news.firebaseio.com/v0/item/${id}.json`;\r\n\r\nconst getRandomNumber = (max: number) =>\r\n  Math.floor(Math.random() * Math.floor(max));\r\nconst fetchData = async (endpoint: string) => {\r\n  const result = await fetch(endpoint).then((response) => response.json());\r\n  return result;\r\n};\r\nconst getRandomIds = (idArray: Array<number>, maxNumber: number) => {\r\n  const randomIds: Array<number> = [];\r\n  const randomIndexNumbers: Array<number> = [];\r\n  for (let i = 0; i < 10; ) {\r\n    const randomNumber: number = getRandomNumber(maxNumber);\r\n    if (!randomIndexNumbers.includes(randomNumber)) {\r\n      randomIndexNumbers.push(randomNumber);\r\n      i++;\r\n    }\r\n  }\r\n  randomIndexNumbers.forEach((number) => {\r\n    randomIds.push(idArray[number]);\r\n  });\r\n  return randomIds;\r\n};\r\n\r\n//COMPONENT\r\nfunction NewsContainer() {\r\n  //let [error, setError] = useState(null);\r\n  const [stories, setStories] = useState([{}]);\r\n  const [isLoading, setLoading] = useState(false);\r\n\r\n  //USE EFFECT\r\n  useEffect(() => {\r\n    async function getRandomStories() {\r\n      setLoading(true);\r\n      const storiesId: Array<number> = await fetchData(topStoriesAPI);\r\n      const idLength: number = storiesId.length;\r\n      const randomIds: Array<number> = getRandomIds(storiesId, idLength);\r\n      const response: Array<object> = await Promise.all(\r\n        randomIds.map((ID) => fetchData(newsAPI(ID)))\r\n      );\r\n      setStories(response);\r\n      setLoading(false);\r\n    }\r\n    getRandomStories();\r\n  }, []);\r\n  //RENDERING\r\n  return (\r\n    <main className=\"topNews\">\r\n      {isLoading ? (\r\n        <p>loading...</p>\r\n      ) : (\r\n        stories\r\n          .sort(\r\n            (fistStory: any, secondStory: any) =>\r\n              secondStory.score - fistStory.score\r\n          )\r\n          .map((story: any) => <News news={story} key={story.id} />)\r\n      )}\r\n    </main>\r\n  );\r\n}\r\n\r\nexport default NewsContainer;\r\n","import React from 'react';\n\nimport './App.css';\nimport NewsContainer from './organisms/NewsContainer';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <h1>Top Hacker's News</h1>\n      <NewsContainer />\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './reset.css';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}